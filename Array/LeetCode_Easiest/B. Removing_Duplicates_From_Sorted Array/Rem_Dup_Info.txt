Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Hint: Here we are going to use the two pointer method
R Pointer is for checking the values on the input array
L is for inserting the unique values 

Algorithm:
> Assign the left pointer val to 1.
> Create a for loop for the right pointer and provide the range of 1 to len(nums).
> check whether the val(right) not equals to the val(right-1)[previous element]
> if true means, assign the left pointer value to the value of the right pointer.
> increments the left pointer value, and the right pointer value will automatically increase with the for loop execution.
> Return the left pointer at the end of the for loop.
> End the program.