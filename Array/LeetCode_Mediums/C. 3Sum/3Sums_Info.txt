Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

Hint: Use the two-pointer method to solve this 3Sum.

Algorithm:

> Start the program.
> Sort the given list.
> Create an empty list to store the result values.
> Check if the len(nums) is less than 3, means return the result as the empty list,
> Then create a for loop to iterate through the list with the range of 1 to len(nums) - 1.
> Assigning the left pointer as i + 1.
> Assigning the right pointer as len of nums - 1.
> Checking if the i is the same as the previous element from after the execution of the 1st iteration means continuing the loop to the next iteration.
> Create a loop to sum the values. For that, the left pointer is less than the right pointer.
> Add the values of nums concerning the index of corresponding i,l,r, and store it in s.
> Check if the s is equal to 0 means 
	Append the values of nums[i], nums[l], and nums[r] to res as a list.
	Then increment the left pointer by 1.
	And then decrement the right pointer by 1.
> Create a loop to check if the current element is the same as the previous element, then increment the left pointer.
> Similarly, create a loop to check the same elements for the right pointer; if yes, means decrement the right pointer.
> Check if the s is less than 0 means increment the left pointer.
> else increment the right pointer.
> At the end, return the result.