Jump Game II

You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].
 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2

Hint: Use the two-pointer method to solve this.

Algorithm:

> Start the program.
> Assign the left, right, and the result pointers as 0.
> Open a loop to set a range with the len(nums)-1.
> Assign the max as 0 and open a loop to iterate through the values in the list.
> Check if the nums[i]+I is greater than max, if true, means assign the max as nums[i]+i.
> Then increment the left as right + 1.
> Assign the right with the max 
> Increment the result by 1.
> Return the result and then end the program.