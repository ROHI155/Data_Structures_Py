The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.
Example 1:

Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Example 2:

Input: nums = [1,1,1], k = 2
Output: 0
Example 3:

Input: nums = [1,6,1], k = 3
Output: 5

Hint: Here we are using both the binary search and the two-pointer method.
Working:

> Initially, it will sort the nums list or array.
> Then it enters the while loop.
	Assigning the low as 0 and the high as the number of (-1) - (0).
> Enters into the while loop with the condition of Low < High.
> Then it performs the mid value with the help of the low and high.
> Then enters into the condition count_pairs(mid)<k.
> Immediately, it executes the count_pairs.
> In the count_pairs function, the count and j are assigned as 0.
> Then it enters the loop with the i range through the length of nums.
> Then it executes another loop, which checks the j is less than len(nums) and j-i is less than or equal to max_dist.
	If it comes in the range means it executes the following.
	Increment j by 1.
> In the outer loop of the for, it performs the count += j - I -1.
> And at the end of the for loop, it returns the count. In the last, it returns the count.
> And now it comes back to the if condition, if true, it means assigns the low equal to the mid + 1.
> Else assigns the high equals to mid.
> At the end returns the low.