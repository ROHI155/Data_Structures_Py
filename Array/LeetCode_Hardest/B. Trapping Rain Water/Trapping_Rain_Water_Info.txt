Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:

Pic is mentioned with the name of ref_1 in the repo

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9

Hint: Here we are using the two-pointer method.

Algorithm:

> Start the program.
> Here we are assigning the left pointer as 0.
> Then assign the right pointer as len(height)-1.
> Then assign the max_l with the particular value of left.
> Then assign the max_r with the particular value of right.
> Then check for the condition while 'l' is less than 'r'.
> Then check the condition height[l] value is lesser then the height[r].
	If true means, 
		Assign the max_l with picking and comparing the max_l and height[l] using the max function.
		Then calculate the total by summing it to the difference of max_l and height[l].
		Then increment the value of left to 1.
> If the height is empty, return total as 0.
> Else the l > r (or) l == r means execute the following,
	Assign the max_r by picking and comparing the max_r and height[r] using the max function.
	Then calculate the total by summing it to the difference of max_r and height[r].
	Then decrement the value of right to 1, because the right pointer is starts from the last value so it needs to be decremented.
> At the end of the loop, return the total.
> End and submit the program.
