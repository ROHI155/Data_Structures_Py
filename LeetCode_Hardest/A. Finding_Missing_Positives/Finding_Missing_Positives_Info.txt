Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing

Hint: Use sorting methods and simple techniques.

Algorithm:

> Start the program.
> Initialize the variable missing equas to 1 because we are suppposed to findout the positvies only.
> Sort the array and remove duplicates using set in the nums.
    sorted -> Used to Sort the array.
    set -> Removes the duplicates.
> Enter into the for loop and iterate through the sorted array 'sort' with 'i'.
> Check if 'i' > 0 means executes the following else goto next indexed element.
> Check if the sort[i] is equals to the missing then increments the missing value plus one.
> else break the loop.
> At the end of the loop return the missing value. 